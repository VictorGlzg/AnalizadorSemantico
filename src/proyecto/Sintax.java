
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Jun 13 10:43:51 CDT 2022
//----------------------------------------------------

package proyecto;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Jun 13 10:43:51 CDT 2022
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\056\000\002\002\004\000\002\002\010\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\003\003\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\007\000\002\004\007\000\002\004\007" +
    "\000\002\004\011\000\002\015\003\000\002\015\004\000" +
    "\002\015\004\000\002\015\005\000\002\005\011\000\002" +
    "\016\006\000\002\006\011\000\002\006\012\000\002\007" +
    "\011\000\002\011\013\000\002\010\005\000\002\010\007" +
    "\000\002\010\005\000\002\010\007\000\002\010\005\000" +
    "\002\010\007\000\002\010\005\000\002\010\007\000\002" +
    "\010\007\000\002\010\011\000\002\010\002\000\002\012" +
    "\016\000\002\012\017\000\002\013\010\000\002\013\011" +
    "\000\002\014\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\203\000\004\017\004\001\002\000\004\032\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\033\010\001\002\000\004\030\011\001\002\000" +
    "\022\004\025\005\030\006\012\007\016\010\015\011\021" +
    "\012\022\015\020\001\002\000\004\040\201\001\002\000" +
    "\026\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6" +
    "\012\ufff6\015\ufff6\030\ufff6\046\ufff6\001\002\000\026\004" +
    "\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa" +
    "\015\ufffa\030\ufffa\046\ufffa\001\002\000\004\032\162\001" +
    "\002\000\004\040\153\001\002\000\026\004\ufffe\005\ufffe" +
    "\006\ufffe\007\ufffe\010\ufffe\011\ufffe\012\ufffe\015\ufffe\030" +
    "\ufffe\046\ufffe\001\002\000\004\032\145\001\002\000\004" +
    "\032\121\001\002\000\004\032\113\001\002\000\024\004" +
    "\025\005\030\006\012\007\016\010\015\011\021\012\022" +
    "\015\020\030\112\001\002\000\032\004\uffed\005\uffed\006" +
    "\uffed\007\uffed\010\uffed\011\uffed\012\uffed\013\043\014\045" +
    "\015\uffed\030\uffed\046\uffed\001\002\000\004\040\036\001" +
    "\002\000\026\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8" +
    "\011\ufff8\012\ufff8\015\ufff8\030\ufff8\046\ufff8\001\002\000" +
    "\026\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc" +
    "\012\ufffc\015\ufffc\030\ufffc\046\ufffc\001\002\000\004\040" +
    "\031\001\002\000\006\022\033\031\032\001\002\000\026" +
    "\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012" +
    "\ufff4\015\ufff4\030\ufff4\046\ufff4\001\002\000\004\042\034" +
    "\001\002\000\004\031\035\001\002\000\026\004\ufff1\005" +
    "\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\015\ufff1" +
    "\030\ufff1\046\ufff1\001\002\000\006\022\040\031\037\001" +
    "\002\000\026\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5" +
    "\011\ufff5\012\ufff5\015\ufff5\030\ufff5\046\ufff5\001\002\000" +
    "\004\041\041\001\002\000\004\031\042\001\002\000\026" +
    "\004\uffef\005\uffef\006\uffef\007\uffef\010\uffef\011\uffef\012" +
    "\uffef\015\uffef\030\uffef\046\uffef\001\002\000\004\032\060" +
    "\001\002\000\026\004\uffec\005\uffec\006\uffec\007\uffec\010" +
    "\uffec\011\uffec\012\uffec\015\uffec\030\uffec\046\uffec\001\002" +
    "\000\004\030\050\001\002\000\030\004\uffeb\005\uffeb\006" +
    "\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\014\045\015\uffeb" +
    "\030\uffeb\046\uffeb\001\002\000\026\004\uffea\005\uffea\006" +
    "\uffea\007\uffea\010\uffea\011\uffea\012\uffea\015\uffea\030\uffea" +
    "\046\uffea\001\002\000\022\004\025\005\030\006\012\007" +
    "\016\010\015\011\021\012\022\015\020\001\002\000\024" +
    "\004\025\005\030\006\012\007\016\010\015\011\021\012" +
    "\022\015\020\030\055\001\002\000\026\004\ufff7\005\ufff7" +
    "\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\015\ufff7\030" +
    "\ufff7\046\ufff7\001\002\000\026\004\ufffb\005\ufffb\006\ufffb" +
    "\007\ufffb\010\ufffb\011\ufffb\012\ufffb\015\ufffb\030\ufffb\046" +
    "\ufffb\001\002\000\026\004\uffff\005\uffff\006\uffff\007\uffff" +
    "\010\uffff\011\uffff\012\uffff\015\uffff\030\uffff\046\uffff\001" +
    "\002\000\026\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8" +
    "\011\uffe8\012\uffe8\015\uffe8\030\uffe8\046\uffe8\001\002\000" +
    "\026\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd" +
    "\012\ufffd\015\ufffd\030\ufffd\046\ufffd\001\002\000\026\004" +
    "\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9" +
    "\015\ufff9\030\ufff9\046\ufff9\001\002\000\006\033\uffd9\040" +
    "\062\001\002\000\004\033\105\001\002\000\004\034\063" +
    "\001\002\000\014\021\065\036\067\040\066\041\064\042" +
    "\070\001\002\000\010\031\uffe1\033\uffe1\035\103\001\002" +
    "\000\004\040\077\001\002\000\010\031\uffdd\033\uffdd\035" +
    "\075\001\002\000\010\031\uffe3\033\uffe3\035\073\001\002" +
    "\000\010\031\uffdf\033\uffdf\035\071\001\002\000\010\031" +
    "\uffd9\033\uffd9\040\062\001\002\000\006\031\uffde\033\uffde" +
    "\001\002\000\010\031\uffd9\033\uffd9\040\062\001\002\000" +
    "\006\031\uffe2\033\uffe2\001\002\000\010\031\uffd9\033\uffd9" +
    "\040\062\001\002\000\006\031\uffdc\033\uffdc\001\002\000" +
    "\004\021\100\001\002\000\010\031\uffdb\033\uffdb\035\101" +
    "\001\002\000\010\031\uffd9\033\uffd9\040\062\001\002\000" +
    "\006\031\uffda\033\uffda\001\002\000\010\031\uffd9\033\uffd9" +
    "\040\062\001\002\000\006\031\uffe0\033\uffe0\001\002\000" +
    "\004\030\106\001\002\000\022\004\025\005\030\006\012" +
    "\007\016\010\015\011\021\012\022\015\020\001\002\000" +
    "\024\004\025\005\030\006\012\007\016\010\015\011\021" +
    "\012\022\015\020\030\110\001\002\000\032\004\uffe7\005" +
    "\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013\043" +
    "\014\uffe7\015\uffe7\030\uffe7\046\uffe7\001\002\000\030\004" +
    "\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6" +
    "\014\uffe6\015\uffe6\030\uffe6\046\uffe6\001\002\000\004\002" +
    "\000\001\002\000\006\033\uffd9\040\062\001\002\000\004" +
    "\033\115\001\002\000\004\030\116\001\002\000\022\004" +
    "\025\005\030\006\012\007\016\010\015\011\021\012\022" +
    "\015\020\001\002\000\024\004\025\005\030\006\012\007" +
    "\016\010\015\011\021\012\022\015\020\030\120\001\002" +
    "\000\032\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\011" +
    "\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\030\uffe9\046\uffe9" +
    "\001\002\000\004\040\122\001\002\000\004\033\123\001" +
    "\002\000\004\030\124\001\002\000\004\045\125\001\002" +
    "\000\004\040\126\001\002\000\004\044\127\001\002\000" +
    "\022\004\025\005\030\006\012\007\016\010\015\011\021" +
    "\012\022\015\020\001\002\000\024\004\025\005\030\006" +
    "\012\007\016\010\015\011\021\012\022\015\020\046\131" +
    "\001\002\000\004\031\132\001\002\000\006\030\135\045" +
    "\134\001\002\000\004\030\144\001\002\000\004\040\136" +
    "\001\002\000\026\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010" +
    "\uffd8\011\uffd8\012\uffd8\015\uffd8\030\uffd8\046\uffd8\001\002" +
    "\000\004\044\137\001\002\000\022\004\025\005\030\006" +
    "\012\007\016\010\015\011\021\012\022\015\020\001\002" +
    "\000\024\004\025\005\030\006\012\007\016\010\015\011" +
    "\021\012\022\015\020\046\141\001\002\000\004\031\142" +
    "\001\002\000\006\030\uffd6\045\134\001\002\000\004\030" +
    "\uffd5\001\002\000\026\004\uffd7\005\uffd7\006\uffd7\007\uffd7" +
    "\010\uffd7\011\uffd7\012\uffd7\015\uffd7\030\uffd7\046\uffd7\001" +
    "\002\000\006\033\uffd9\040\062\001\002\000\004\033\147" +
    "\001\002\000\004\030\150\001\002\000\022\004\025\005" +
    "\030\006\012\007\016\010\015\011\021\012\022\015\020" +
    "\001\002\000\024\004\025\005\030\006\012\007\016\010" +
    "\015\011\021\012\022\015\020\030\152\001\002\000\026" +
    "\004\uffd4\005\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4\012" +
    "\uffd4\015\uffd4\030\uffd4\046\uffd4\001\002\000\006\022\155" +
    "\031\154\001\002\000\026\004\ufff2\005\ufff2\006\ufff2\007" +
    "\ufff2\010\ufff2\011\ufff2\012\ufff2\015\ufff2\030\ufff2\046\ufff2" +
    "\001\002\000\004\021\156\001\002\000\004\040\157\001" +
    "\002\000\004\021\160\001\002\000\004\031\161\001\002" +
    "\000\026\004\uffee\005\uffee\006\uffee\007\uffee\010\uffee\011" +
    "\uffee\012\uffee\015\uffee\030\uffee\046\uffee\001\002\000\004" +
    "\004\164\001\002\000\004\033\175\001\002\000\004\040" +
    "\165\001\002\000\004\022\166\001\002\000\004\041\167" +
    "\001\002\000\004\031\170\001\002\000\006\031\uffd9\040" +
    "\062\001\002\000\004\031\172\001\002\000\004\040\173" +
    "\001\002\000\004\037\174\001\002\000\004\033\uffe4\001" +
    "\002\000\004\030\176\001\002\000\022\004\025\005\030" +
    "\006\012\007\016\010\015\011\021\012\022\015\020\001" +
    "\002\000\024\004\025\005\030\006\012\007\016\010\015" +
    "\011\021\012\022\015\020\030\200\001\002\000\026\004" +
    "\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5" +
    "\015\uffe5\030\uffe5\046\uffe5\001\002\000\006\022\203\031" +
    "\202\001\002\000\026\004\ufff3\005\ufff3\006\ufff3\007\ufff3" +
    "\010\ufff3\011\ufff3\012\ufff3\015\ufff3\030\ufff3\046\ufff3\001" +
    "\002\000\004\036\204\001\002\000\004\031\205\001\002" +
    "\000\026\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\011" +
    "\ufff0\012\ufff0\015\ufff0\030\ufff0\046\ufff0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\203\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\003\022\004\016\005\023\007\013\012" +
    "\025\014\012\015\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\004\053\005\023\007\052\012" +
    "\056\014\051\015\055\001\001\000\006\006\045\016\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\046\001\001\000\002" +
    "\001\001\000\020\003\050\004\016\005\023\007\013\012" +
    "\025\014\012\015\026\001\001\000\016\004\053\005\023" +
    "\007\052\012\056\014\051\015\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\071\001\001" +
    "\000\002\001\001\000\004\010\073\001\001\000\002\001" +
    "\001\000\004\010\075\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\101\001\001\000" +
    "\002\001\001\000\004\010\103\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\003\106\004\016\005\023\007" +
    "\013\012\025\014\012\015\026\001\001\000\016\004\053" +
    "\005\023\007\052\012\056\014\051\015\055\001\001\000" +
    "\004\006\110\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\003\116\004\016\005\023\007\013\012\025" +
    "\014\012\015\026\001\001\000\016\004\053\005\023\007" +
    "\052\012\056\014\051\015\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\003\127\004\016\005\023\007\013\012\025\014\012\015" +
    "\026\001\001\000\016\004\053\005\023\007\052\012\056" +
    "\014\051\015\055\001\001\000\002\001\001\000\004\013" +
    "\132\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\003\137\004\016\005" +
    "\023\007\013\012\025\014\012\015\026\001\001\000\016" +
    "\004\053\005\023\007\052\012\056\014\051\015\055\001" +
    "\001\000\002\001\001\000\004\013\142\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\145\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\003\150\004\016" +
    "\005\023\007\013\012\025\014\012\015\026\001\001\000" +
    "\016\004\053\005\023\007\052\012\056\014\051\015\055" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\162\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\170\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\003\176\004" +
    "\016\005\023\007\013\012\025\014\012\015\026\001\001" +
    "\000\016\004\053\005\023\007\052\012\056\014\051\015" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // WHILE ::= Mientras Apertura BOOL_SENT Cerradura LlaveAC CUERPO LlaveAC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // MASCASE ::= Caso Identificador DoblePunto CUERPO Salida CerrarL MASCASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MASCASE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // MASCASE ::= Caso Identificador DoblePunto CUERPO Salida CerrarL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MASCASE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SWITCH ::= Cambio Apertura Identificador Cerradura LlaveAC Caso Identificador DoblePunto CUERPO Salida CerrarL MASCASE LlaveAC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SWITCH ::= Cambio Apertura Identificador Cerradura LlaveAC Caso Identificador DoblePunto CUERPO Salida CerrarL LlaveAC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // BOOL_SENT ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOL_SENT",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // BOOL_SENT ::= Identificador Op_R Comillas Identificador Comillas Op_L BOOL_SENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOL_SENT",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // BOOL_SENT ::= Identificador Op_R Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOL_SENT",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // BOOL_SENT ::= Identificador Op_R Identificador Op_L BOOL_SENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOL_SENT",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // BOOL_SENT ::= Identificador Op_R Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOL_SENT",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // BOOL_SENT ::= Identificador Op_R Decimal Op_L BOOL_SENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOL_SENT",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // BOOL_SENT ::= Identificador Op_R Decimal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOL_SENT",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // BOOL_SENT ::= Identificador Op_R Numero Op_L BOOL_SENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOL_SENT",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // BOOL_SENT ::= Identificador Op_R Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOL_SENT",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // BOOL_SENT ::= Identificador Op_R Op_B Op_L BOOL_SENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOL_SENT",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // BOOL_SENT ::= Identificador Op_R Op_B 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOL_SENT",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FOR_SENT ::= Entero Identificador Igual Numero CerrarL BOOL_SENT CerrarL Identificador Op_I 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR_SENT",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FOR ::= Para Apertura FOR_SENT Cerradura LlaveAC CUERPO LlaveAC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // IF_ELSE ::= Sino Apertura BOOL_SENT Cerradura LlaveAC CUERPO LlaveAC IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // IF_ELSE ::= Sino Apertura BOOL_SENT Cerradura LlaveAC CUERPO LlaveAC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ELSE ::= Ademas LlaveAC CUERPO LlaveAC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // IF ::= Si Apertura BOOL_SENT Cerradura LlaveAC CUERPO LlaveAC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENT_IF ::= IF IF_ELSE ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_IF",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENT_IF ::= IF IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_IF",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENT_IF ::= IF ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_IF",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENT_IF ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_IF",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLA ::= Cadena Identificador Igual Comillas Identificador Comillas CerrarL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLA ::= Entero Identificador Igual Numero CerrarL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLA ::= Boleano Identificador Igual Op_B CerrarL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLA ::= Flotante Identificador Igual Decimal CerrarL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLA ::= Cadena Identificador CerrarL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLA ::= Boleano Identificador CerrarL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECLA ::= Flotante Identificador CerrarL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECLA ::= Entero Identificador CerrarL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CUERPO ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CUERPO ::= CUERPO WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CUERPO ::= SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CUERPO ::= CUERPO SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CUERPO ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CUERPO ::= CUERPO FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CUERPO ::= SENT_IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CUERPO ::= CUERPO SENT_IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CUERPO ::= DECLA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CUERPO ::= CUERPO DECLA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Inicial Apertura Cerradura LlaveAC CUERPO LlaveAC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

