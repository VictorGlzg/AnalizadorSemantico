
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Dec 07 12:54:13 CST 2022
//----------------------------------------------------

package proyecto;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Dec 07 12:54:13 CST 2022
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\070\000\002\002\004\000\002\002\010\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\003\003\000\002" +
    "\003\004\000\002\003\003\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\005\000\002\004\007" +
    "\000\002\004\007\000\002\004\007\000\002\004\007\000" +
    "\002\004\007\000\002\005\006\000\002\005\006\000\002" +
    "\005\006\000\002\005\006\000\002\005\006\000\002\006" +
    "\005\000\002\006\005\000\002\017\003\000\002\017\004" +
    "\000\002\017\004\000\002\017\005\000\002\007\011\000" +
    "\002\020\006\000\002\010\011\000\002\010\012\000\002" +
    "\011\011\000\002\013\013\000\002\012\005\000\002\012" +
    "\007\000\002\012\005\000\002\012\007\000\002\012\005" +
    "\000\002\012\007\000\002\012\005\000\002\012\007\000" +
    "\002\012\007\000\002\012\011\000\002\012\002\000\002" +
    "\014\016\000\002\014\017\000\002\015\010\000\002\015" +
    "\011\000\002\016\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\225\000\004\020\004\001\002\000\004\033\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\034\010\001\002\000\004\031\011\001\002\000" +
    "\024\004\026\005\032\006\012\007\015\011\016\012\021" +
    "\013\022\016\020\041\027\001\002\000\004\041\223\001" +
    "\002\000\030\004\ufff4\005\ufff4\006\ufff4\007\ufff4\011\ufff4" +
    "\012\ufff4\013\ufff4\016\ufff4\031\ufff4\041\ufff4\047\ufff4\001" +
    "\002\000\030\004\ufff8\005\ufff8\006\ufff8\007\ufff8\011\ufff8" +
    "\012\ufff8\013\ufff8\016\ufff8\031\ufff8\041\ufff8\047\ufff8\001" +
    "\002\000\004\041\216\001\002\000\004\033\177\001\002" +
    "\000\030\004\ufffe\005\ufffe\006\ufffe\007\ufffe\011\ufffe\012" +
    "\ufffe\013\ufffe\016\ufffe\031\ufffe\041\ufffe\047\ufffe\001\002" +
    "\000\004\033\171\001\002\000\004\033\145\001\002\000" +
    "\004\033\137\001\002\000\026\004\026\005\032\006\012" +
    "\007\015\011\016\012\021\013\022\016\020\031\136\041" +
    "\027\001\002\000\034\004\uffe3\005\uffe3\006\uffe3\007\uffe3" +
    "\011\uffe3\012\uffe3\013\uffe3\014\066\015\070\016\uffe3\031" +
    "\uffe3\041\uffe3\047\uffe3\001\002\000\030\004\ufffc\005\ufffc" +
    "\006\ufffc\007\ufffc\011\ufffc\012\ufffc\013\ufffc\016\ufffc\031" +
    "\ufffc\041\ufffc\047\ufffc\001\002\000\004\041\057\001\002" +
    "\000\004\023\040\001\002\000\030\004\ufffa\005\ufffa\006" +
    "\ufffa\007\ufffa\011\ufffa\012\ufffa\013\ufffa\016\ufffa\031\ufffa" +
    "\041\ufffa\047\ufffa\001\002\000\030\004\ufff6\005\ufff6\006" +
    "\ufff6\007\ufff6\011\ufff6\012\ufff6\013\ufff6\016\ufff6\031\ufff6" +
    "\041\ufff6\047\ufff6\001\002\000\004\041\033\001\002\000" +
    "\006\023\035\032\034\001\002\000\030\004\ufff2\005\ufff2" +
    "\006\ufff2\007\ufff2\011\ufff2\012\ufff2\013\ufff2\016\ufff2\031" +
    "\ufff2\041\ufff2\047\ufff2\001\002\000\004\043\036\001\002" +
    "\000\004\032\037\001\002\000\030\004\uffef\005\uffef\006" +
    "\uffef\007\uffef\011\uffef\012\uffef\013\uffef\016\uffef\031\uffef" +
    "\041\uffef\047\uffef\001\002\000\012\010\043\037\045\042" +
    "\041\043\044\001\002\000\006\025\054\032\055\001\002" +
    "\000\006\025\051\032\052\001\002\000\004\032\050\001" +
    "\002\000\004\032\047\001\002\000\004\032\046\001\002" +
    "\000\030\004\uffe7\005\uffe7\006\uffe7\007\uffe7\011\uffe7\012" +
    "\uffe7\013\uffe7\016\uffe7\031\uffe7\041\uffe7\047\uffe7\001\002" +
    "\000\030\004\uffe8\005\uffe8\006\uffe8\007\uffe8\011\uffe8\012" +
    "\uffe8\013\uffe8\016\uffe8\031\uffe8\041\uffe8\047\uffe8\001\002" +
    "\000\030\004\uffe6\005\uffe6\006\uffe6\007\uffe6\011\uffe6\012" +
    "\uffe6\013\uffe6\016\uffe6\031\uffe6\041\uffe6\047\uffe6\001\002" +
    "\000\004\042\053\001\002\000\030\004\uffe9\005\uffe9\006" +
    "\uffe9\007\uffe9\011\uffe9\012\uffe9\013\uffe9\016\uffe9\031\uffe9" +
    "\041\uffe9\047\uffe9\001\002\000\006\025\uffe4\032\uffe4\001" +
    "\002\000\004\042\056\001\002\000\030\004\uffea\005\uffea" +
    "\006\uffea\007\uffea\011\uffea\012\uffea\013\uffea\016\uffea\031" +
    "\uffea\041\uffea\047\uffea\001\002\000\006\025\uffe5\032\uffe5" +
    "\001\002\000\006\023\061\032\060\001\002\000\030\004" +
    "\ufff3\005\ufff3\006\ufff3\007\ufff3\011\ufff3\012\ufff3\013\ufff3" +
    "\016\ufff3\031\ufff3\041\ufff3\047\ufff3\001\002\000\004\042" +
    "\062\001\002\000\006\025\054\032\065\001\002\000\006" +
    "\025\051\032\064\001\002\000\030\004\uffec\005\uffec\006" +
    "\uffec\007\uffec\011\uffec\012\uffec\013\uffec\016\uffec\031\uffec" +
    "\041\uffec\047\uffec\001\002\000\030\004\uffed\005\uffed\006" +
    "\uffed\007\uffed\011\uffed\012\uffed\013\uffed\016\uffed\031\uffed" +
    "\041\uffed\047\uffed\001\002\000\004\033\104\001\002\000" +
    "\030\004\uffe2\005\uffe2\006\uffe2\007\uffe2\011\uffe2\012\uffe2" +
    "\013\uffe2\016\uffe2\031\uffe2\041\uffe2\047\uffe2\001\002\000" +
    "\004\031\073\001\002\000\032\004\uffe1\005\uffe1\006\uffe1" +
    "\007\uffe1\011\uffe1\012\uffe1\013\uffe1\015\070\016\uffe1\031" +
    "\uffe1\041\uffe1\047\uffe1\001\002\000\030\004\uffe0\005\uffe0" +
    "\006\uffe0\007\uffe0\011\uffe0\012\uffe0\013\uffe0\016\uffe0\031" +
    "\uffe0\041\uffe0\047\uffe0\001\002\000\024\004\026\005\032" +
    "\006\012\007\015\011\016\012\021\013\022\016\020\041" +
    "\027\001\002\000\026\004\026\005\032\006\012\007\015" +
    "\011\016\012\021\013\022\016\020\031\100\041\027\001" +
    "\002\000\030\004\ufff5\005\ufff5\006\ufff5\007\ufff5\011\ufff5" +
    "\012\ufff5\013\ufff5\016\ufff5\031\ufff5\041\ufff5\047\ufff5\001" +
    "\002\000\030\004\ufff9\005\ufff9\006\ufff9\007\ufff9\011\ufff9" +
    "\012\ufff9\013\ufff9\016\ufff9\031\ufff9\041\ufff9\047\ufff9\001" +
    "\002\000\030\004\uffff\005\uffff\006\uffff\007\uffff\011\uffff" +
    "\012\uffff\013\uffff\016\uffff\031\uffff\041\uffff\047\uffff\001" +
    "\002\000\030\004\uffde\005\uffde\006\uffde\007\uffde\011\uffde" +
    "\012\uffde\013\uffde\016\uffde\031\uffde\041\uffde\047\uffde\001" +
    "\002\000\030\004\ufffd\005\ufffd\006\ufffd\007\ufffd\011\ufffd" +
    "\012\ufffd\013\ufffd\016\ufffd\031\ufffd\041\ufffd\047\ufffd\001" +
    "\002\000\030\004\ufffb\005\ufffb\006\ufffb\007\ufffb\011\ufffb" +
    "\012\ufffb\013\ufffb\016\ufffb\031\ufffb\041\ufffb\047\ufffb\001" +
    "\002\000\030\004\ufff7\005\ufff7\006\ufff7\007\ufff7\011\ufff7" +
    "\012\ufff7\013\ufff7\016\ufff7\031\ufff7\041\ufff7\047\ufff7\001" +
    "\002\000\006\034\uffcf\041\106\001\002\000\004\034\131" +
    "\001\002\000\004\035\107\001\002\000\014\022\111\037" +
    "\113\041\112\042\110\043\114\001\002\000\010\032\uffd7" +
    "\034\uffd7\036\127\001\002\000\004\041\123\001\002\000" +
    "\010\032\uffd3\034\uffd3\036\121\001\002\000\010\032\uffd9" +
    "\034\uffd9\036\117\001\002\000\010\032\uffd5\034\uffd5\036" +
    "\115\001\002\000\010\032\uffcf\034\uffcf\041\106\001\002" +
    "\000\006\032\uffd4\034\uffd4\001\002\000\010\032\uffcf\034" +
    "\uffcf\041\106\001\002\000\006\032\uffd8\034\uffd8\001\002" +
    "\000\010\032\uffcf\034\uffcf\041\106\001\002\000\006\032" +
    "\uffd2\034\uffd2\001\002\000\004\022\124\001\002\000\010" +
    "\032\uffd1\034\uffd1\036\125\001\002\000\010\032\uffcf\034" +
    "\uffcf\041\106\001\002\000\006\032\uffd0\034\uffd0\001\002" +
    "\000\010\032\uffcf\034\uffcf\041\106\001\002\000\006\032" +
    "\uffd6\034\uffd6\001\002\000\004\031\132\001\002\000\024" +
    "\004\026\005\032\006\012\007\015\011\016\012\021\013" +
    "\022\016\020\041\027\001\002\000\026\004\026\005\032" +
    "\006\012\007\015\011\016\012\021\013\022\016\020\031" +
    "\134\041\027\001\002\000\034\004\uffdd\005\uffdd\006\uffdd" +
    "\007\uffdd\011\uffdd\012\uffdd\013\uffdd\014\066\015\uffdd\016" +
    "\uffdd\031\uffdd\041\uffdd\047\uffdd\001\002\000\032\004\uffdc" +
    "\005\uffdc\006\uffdc\007\uffdc\011\uffdc\012\uffdc\013\uffdc\015" +
    "\uffdc\016\uffdc\031\uffdc\041\uffdc\047\uffdc\001\002\000\004" +
    "\002\000\001\002\000\006\034\uffcf\041\106\001\002\000" +
    "\004\034\141\001\002\000\004\031\142\001\002\000\024" +
    "\004\026\005\032\006\012\007\015\011\016\012\021\013" +
    "\022\016\020\041\027\001\002\000\026\004\026\005\032" +
    "\006\012\007\015\011\016\012\021\013\022\016\020\031" +
    "\144\041\027\001\002\000\034\004\uffdf\005\uffdf\006\uffdf" +
    "\007\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016" +
    "\uffdf\031\uffdf\041\uffdf\047\uffdf\001\002\000\004\041\146" +
    "\001\002\000\004\034\147\001\002\000\004\031\150\001" +
    "\002\000\004\046\151\001\002\000\004\041\152\001\002" +
    "\000\004\045\153\001\002\000\024\004\026\005\032\006" +
    "\012\007\015\011\016\012\021\013\022\016\020\041\027" +
    "\001\002\000\026\004\026\005\032\006\012\007\015\011" +
    "\016\012\021\013\022\016\020\041\027\047\155\001\002" +
    "\000\004\032\156\001\002\000\006\031\161\046\160\001" +
    "\002\000\004\031\170\001\002\000\004\041\162\001\002" +
    "\000\030\004\uffce\005\uffce\006\uffce\007\uffce\011\uffce\012" +
    "\uffce\013\uffce\016\uffce\031\uffce\041\uffce\047\uffce\001\002" +
    "\000\004\045\163\001\002\000\024\004\026\005\032\006" +
    "\012\007\015\011\016\012\021\013\022\016\020\041\027" +
    "\001\002\000\026\004\026\005\032\006\012\007\015\011" +
    "\016\012\021\013\022\016\020\041\027\047\165\001\002" +
    "\000\004\032\166\001\002\000\006\031\uffcc\046\160\001" +
    "\002\000\004\031\uffcb\001\002\000\030\004\uffcd\005\uffcd" +
    "\006\uffcd\007\uffcd\011\uffcd\012\uffcd\013\uffcd\016\uffcd\031" +
    "\uffcd\041\uffcd\047\uffcd\001\002\000\006\034\uffcf\041\106" +
    "\001\002\000\004\034\173\001\002\000\004\031\174\001" +
    "\002\000\024\004\026\005\032\006\012\007\015\011\016" +
    "\012\021\013\022\016\020\041\027\001\002\000\026\004" +
    "\026\005\032\006\012\007\015\011\016\012\021\013\022" +
    "\016\020\031\176\041\027\001\002\000\030\004\uffca\005" +
    "\uffca\006\uffca\007\uffca\011\uffca\012\uffca\013\uffca\016\uffca" +
    "\031\uffca\041\uffca\047\uffca\001\002\000\004\004\201\001" +
    "\002\000\004\034\212\001\002\000\004\041\202\001\002" +
    "\000\004\023\203\001\002\000\004\042\204\001\002\000" +
    "\004\032\205\001\002\000\006\032\uffcf\041\106\001\002" +
    "\000\004\032\207\001\002\000\004\041\210\001\002\000" +
    "\004\040\211\001\002\000\004\034\uffda\001\002\000\004" +
    "\031\213\001\002\000\024\004\026\005\032\006\012\007" +
    "\015\011\016\012\021\013\022\016\020\041\027\001\002" +
    "\000\026\004\026\005\032\006\012\007\015\011\016\012" +
    "\021\013\022\016\020\031\215\041\027\001\002\000\030" +
    "\004\uffdb\005\uffdb\006\uffdb\007\uffdb\011\uffdb\012\uffdb\013" +
    "\uffdb\016\uffdb\031\uffdb\041\uffdb\047\uffdb\001\002\000\006" +
    "\023\220\032\217\001\002\000\030\004\ufff0\005\ufff0\006" +
    "\ufff0\007\ufff0\011\ufff0\012\ufff0\013\ufff0\016\ufff0\031\ufff0" +
    "\041\ufff0\047\ufff0\001\002\000\004\010\221\001\002\000" +
    "\004\032\222\001\002\000\030\004\uffeb\005\uffeb\006\uffeb" +
    "\007\uffeb\011\uffeb\012\uffeb\013\uffeb\016\uffeb\031\uffeb\041" +
    "\uffeb\047\uffeb\001\002\000\006\023\225\032\224\001\002" +
    "\000\030\004\ufff1\005\ufff1\006\ufff1\007\ufff1\011\ufff1\012" +
    "\ufff1\013\ufff1\016\ufff1\031\ufff1\041\ufff1\047\ufff1\001\002" +
    "\000\004\037\226\001\002\000\004\032\227\001\002\000" +
    "\030\004\uffee\005\uffee\006\uffee\007\uffee\011\uffee\012\uffee" +
    "\013\uffee\016\uffee\031\uffee\041\uffee\047\uffee\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\225\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\003\022\004\016\005\024\007\023\011" +
    "\013\014\030\016\012\017\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\004\076\005\100\007" +
    "\023\011\075\014\102\016\074\017\101\001\001\000\006" +
    "\010\070\020\066\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\071\001\001\000\002\001\001\000\022\003\073\004" +
    "\016\005\024\007\023\011\013\014\030\016\012\017\027" +
    "\001\001\000\020\004\076\005\100\007\023\011\075\014" +
    "\102\016\074\017\101\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\104" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\115\001" +
    "\001\000\002\001\001\000\004\012\117\001\001\000\002" +
    "\001\001\000\004\012\121\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\125\001\001" +
    "\000\002\001\001\000\004\012\127\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\003\132\004\016\005\024" +
    "\007\023\011\013\014\030\016\012\017\027\001\001\000" +
    "\020\004\076\005\100\007\023\011\075\014\102\016\074" +
    "\017\101\001\001\000\004\010\134\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\137\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\003\142\004\016\005" +
    "\024\007\023\011\013\014\030\016\012\017\027\001\001" +
    "\000\020\004\076\005\100\007\023\011\075\014\102\016" +
    "\074\017\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\003\153\004\016" +
    "\005\024\007\023\011\013\014\030\016\012\017\027\001" +
    "\001\000\020\004\076\005\100\007\023\011\075\014\102" +
    "\016\074\017\101\001\001\000\002\001\001\000\004\015" +
    "\156\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\003\163\004\016\005" +
    "\024\007\023\011\013\014\030\016\012\017\027\001\001" +
    "\000\020\004\076\005\100\007\023\011\075\014\102\016" +
    "\074\017\101\001\001\000\002\001\001\000\004\015\166" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\171\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\003\174\004\016\005\024\007\023\011\013\014\030\016" +
    "\012\017\027\001\001\000\020\004\076\005\100\007\023" +
    "\011\075\014\102\016\074\017\101\001\001\000\002\001" +
    "\001\000\004\013\177\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\205\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\003\213\004\016\005\024\007\023\011\013" +
    "\014\030\016\012\017\027\001\001\000\020\004\076\005" +
    "\100\007\023\011\075\014\102\016\074\017\101\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // WHILE ::= Mientras Apertura BOOL_SENT Cerradura LlaveAC CUERPO LlaveAC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // MASCASE ::= Caso Identificador DoblePunto CUERPO Salida CerrarL MASCASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MASCASE",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // MASCASE ::= Caso Identificador DoblePunto CUERPO Salida CerrarL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MASCASE",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SWITCH ::= Cambio Apertura Identificador Cerradura LlaveAC Caso Identificador DoblePunto CUERPO Salida CerrarL MASCASE LlaveAC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SWITCH ::= Cambio Apertura Identificador Cerradura LlaveAC Caso Identificador DoblePunto CUERPO Salida CerrarL LlaveAC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // BOOL_SENT ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOL_SENT",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // BOOL_SENT ::= Identificador Op_R Comillas Identificador Comillas Op_L BOOL_SENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOL_SENT",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // BOOL_SENT ::= Identificador Op_R Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOL_SENT",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // BOOL_SENT ::= Identificador Op_R Identificador Op_L BOOL_SENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOL_SENT",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // BOOL_SENT ::= Identificador Op_R Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOL_SENT",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // BOOL_SENT ::= Identificador Op_R Decimal Op_L BOOL_SENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOL_SENT",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // BOOL_SENT ::= Identificador Op_R Decimal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOL_SENT",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // BOOL_SENT ::= Identificador Op_R Numero Op_L BOOL_SENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOL_SENT",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // BOOL_SENT ::= Identificador Op_R Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOL_SENT",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // BOOL_SENT ::= Identificador Op_R Op_B Op_L BOOL_SENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOL_SENT",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // BOOL_SENT ::= Identificador Op_R Op_B 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOL_SENT",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FOR_SENT ::= Entero Identificador Igual Numero CerrarL BOOL_SENT CerrarL Identificador Op_I 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR_SENT",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FOR ::= Para Apertura FOR_SENT Cerradura LlaveAC CUERPO LlaveAC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // IF_ELSE ::= Sino Apertura BOOL_SENT Cerradura LlaveAC CUERPO LlaveAC IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // IF_ELSE ::= Sino Apertura BOOL_SENT Cerradura LlaveAC CUERPO LlaveAC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ELSE ::= Ademas LlaveAC CUERPO LlaveAC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // IF ::= Si Apertura BOOL_SENT Cerradura LlaveAC CUERPO LlaveAC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENT_IF ::= IF IF_ELSE ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_IF",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENT_IF ::= IF IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_IF",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENT_IF ::= IF ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_IF",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENT_IF ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_IF",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SUM ::= SUM Suma Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUM",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SUM ::= Numero Suma Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUM",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ASIG ::= Identificador Igual Texto CerrarL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ASIG ::= Identificador Igual Op_B CerrarL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ASIG ::= Identificador Igual Decimal CerrarL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ASIG ::= Identificador Igual SUM CerrarL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ASIG ::= Identificador Igual Numero CerrarL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLA ::= Cadena Identificador Igual Texto CerrarL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLA ::= Entero Identificador Igual SUM CerrarL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLA ::= Entero Identificador Igual Numero CerrarL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLA ::= Boleano Identificador Igual Op_B CerrarL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLA ::= Flotante Identificador Igual Decimal CerrarL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLA ::= Cadena Identificador CerrarL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLA ::= Boleano Identificador CerrarL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLA ::= Flotante Identificador CerrarL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLA ::= Entero Identificador CerrarL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CUERPO ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CUERPO ::= CUERPO WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CUERPO ::= SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CUERPO ::= CUERPO SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CUERPO ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CUERPO ::= CUERPO FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CUERPO ::= SENT_IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CUERPO ::= CUERPO SENT_IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CUERPO ::= ASIG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CUERPO ::= CUERPO ASIG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CUERPO ::= DECLA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CUERPO ::= CUERPO DECLA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Inicial Apertura Cerradura LlaveAC CUERPO LlaveAC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

