
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Nov 25 11:35:51 CST 2022
//----------------------------------------------------

package proyecto;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Nov 25 11:35:51 CST 2022
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\057\000\002\002\004\000\002\002\010\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\003\003\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\007\000\002\004\007\000\002\004\007" +
    "\000\002\004\007\000\002\005\002\000\002\016\003\000" +
    "\002\016\004\000\002\016\004\000\002\016\005\000\002" +
    "\006\011\000\002\017\006\000\002\007\011\000\002\007" +
    "\012\000\002\010\011\000\002\012\013\000\002\011\005" +
    "\000\002\011\007\000\002\011\005\000\002\011\007\000" +
    "\002\011\005\000\002\011\007\000\002\011\005\000\002" +
    "\011\007\000\002\011\007\000\002\011\011\000\002\011" +
    "\002\000\002\013\016\000\002\013\017\000\002\014\010" +
    "\000\002\014\011\000\002\015\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\201\000\004\020\004\001\002\000\004\033\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\034\010\001\002\000\004\031\011\001\002\000" +
    "\022\004\025\005\030\006\012\007\016\011\015\012\021" +
    "\013\024\016\017\001\002\000\004\041\177\001\002\000" +
    "\026\004\ufff6\005\ufff6\006\ufff6\007\ufff6\011\ufff6\012\ufff6" +
    "\013\ufff6\016\ufff6\031\ufff6\047\ufff6\001\002\000\026\004" +
    "\ufffa\005\ufffa\006\ufffa\007\ufffa\011\ufffa\012\ufffa\013\ufffa" +
    "\016\ufffa\031\ufffa\047\ufffa\001\002\000\004\033\160\001" +
    "\002\000\004\041\153\001\002\000\004\033\145\001\002" +
    "\000\026\004\ufffe\005\ufffe\006\ufffe\007\ufffe\011\ufffe\012" +
    "\ufffe\013\ufffe\016\ufffe\031\ufffe\047\ufffe\001\002\000\004" +
    "\033\121\001\002\000\024\004\025\005\030\006\012\007" +
    "\016\011\015\012\021\013\024\016\017\031\120\001\002" +
    "\000\032\004\uffec\005\uffec\006\uffec\007\uffec\011\uffec\012" +
    "\uffec\013\uffec\014\101\015\103\016\uffec\031\uffec\047\uffec" +
    "\001\002\000\004\033\043\001\002\000\004\041\036\001" +
    "\002\000\026\004\ufff8\005\ufff8\006\ufff8\007\ufff8\011\ufff8" +
    "\012\ufff8\013\ufff8\016\ufff8\031\ufff8\047\ufff8\001\002\000" +
    "\026\004\ufffc\005\ufffc\006\ufffc\007\ufffc\011\ufffc\012\ufffc" +
    "\013\ufffc\016\ufffc\031\ufffc\047\ufffc\001\002\000\004\041" +
    "\031\001\002\000\006\023\033\032\032\001\002\000\026" +
    "\004\ufff4\005\ufff4\006\ufff4\007\ufff4\011\ufff4\012\ufff4\013" +
    "\ufff4\016\ufff4\031\ufff4\047\ufff4\001\002\000\004\043\034" +
    "\001\002\000\004\032\035\001\002\000\026\004\ufff1\005" +
    "\ufff1\006\ufff1\007\ufff1\011\ufff1\012\ufff1\013\ufff1\016\ufff1" +
    "\031\ufff1\047\ufff1\001\002\000\006\023\040\032\037\001" +
    "\002\000\026\004\ufff5\005\ufff5\006\ufff5\007\ufff5\011\ufff5" +
    "\012\ufff5\013\ufff5\016\ufff5\031\ufff5\047\ufff5\001\002\000" +
    "\004\042\041\001\002\000\004\032\042\001\002\000\026" +
    "\004\uffef\005\uffef\006\uffef\007\uffef\011\uffef\012\uffef\013" +
    "\uffef\016\uffef\031\uffef\047\uffef\001\002\000\006\034\uffd8" +
    "\041\045\001\002\000\004\034\070\001\002\000\004\035" +
    "\046\001\002\000\014\022\050\037\053\041\051\042\047" +
    "\043\052\001\002\000\010\032\uffe0\034\uffe0\036\066\001" +
    "\002\000\004\041\062\001\002\000\010\032\uffdc\034\uffdc" +
    "\036\060\001\002\000\010\032\uffde\034\uffde\036\056\001" +
    "\002\000\010\032\uffe2\034\uffe2\036\054\001\002\000\010" +
    "\032\uffd8\034\uffd8\041\045\001\002\000\006\032\uffe1\034" +
    "\uffe1\001\002\000\010\032\uffd8\034\uffd8\041\045\001\002" +
    "\000\006\032\uffdd\034\uffdd\001\002\000\010\032\uffd8\034" +
    "\uffd8\041\045\001\002\000\006\032\uffdb\034\uffdb\001\002" +
    "\000\004\022\063\001\002\000\010\032\uffda\034\uffda\036" +
    "\064\001\002\000\010\032\uffd8\034\uffd8\041\045\001\002" +
    "\000\006\032\uffd9\034\uffd9\001\002\000\010\032\uffd8\034" +
    "\uffd8\041\045\001\002\000\006\032\uffdf\034\uffdf\001\002" +
    "\000\004\031\071\001\002\000\022\004\025\005\030\006" +
    "\012\007\016\011\015\012\021\013\024\016\017\001\002" +
    "\000\024\004\025\005\030\006\012\007\016\011\015\012" +
    "\021\013\024\016\017\031\076\001\002\000\026\004\ufff7" +
    "\005\ufff7\006\ufff7\007\ufff7\011\ufff7\012\ufff7\013\ufff7\016" +
    "\ufff7\031\ufff7\047\ufff7\001\002\000\026\004\ufffb\005\ufffb" +
    "\006\ufffb\007\ufffb\011\ufffb\012\ufffb\013\ufffb\016\ufffb\031" +
    "\ufffb\047\ufffb\001\002\000\026\004\uffff\005\uffff\006\uffff" +
    "\007\uffff\011\uffff\012\uffff\013\uffff\016\uffff\031\uffff\047" +
    "\uffff\001\002\000\032\004\uffe8\005\uffe8\006\uffe8\007\uffe8" +
    "\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\031" +
    "\uffe8\047\uffe8\001\002\000\026\004\ufffd\005\ufffd\006\ufffd" +
    "\007\ufffd\011\ufffd\012\ufffd\013\ufffd\016\ufffd\031\ufffd\047" +
    "\ufffd\001\002\000\026\004\ufff9\005\ufff9\006\ufff9\007\ufff9" +
    "\011\ufff9\012\ufff9\013\ufff9\016\ufff9\031\ufff9\047\ufff9\001" +
    "\002\000\004\033\111\001\002\000\026\004\uffeb\005\uffeb" +
    "\006\uffeb\007\uffeb\011\uffeb\012\uffeb\013\uffeb\016\uffeb\031" +
    "\uffeb\047\uffeb\001\002\000\004\031\106\001\002\000\030" +
    "\004\uffea\005\uffea\006\uffea\007\uffea\011\uffea\012\uffea\013" +
    "\uffea\015\103\016\uffea\031\uffea\047\uffea\001\002\000\026" +
    "\004\uffe9\005\uffe9\006\uffe9\007\uffe9\011\uffe9\012\uffe9\013" +
    "\uffe9\016\uffe9\031\uffe9\047\uffe9\001\002\000\022\004\025" +
    "\005\030\006\012\007\016\011\015\012\021\013\024\016" +
    "\017\001\002\000\024\004\025\005\030\006\012\007\016" +
    "\011\015\012\021\013\024\016\017\031\110\001\002\000" +
    "\026\004\uffe7\005\uffe7\006\uffe7\007\uffe7\011\uffe7\012\uffe7" +
    "\013\uffe7\016\uffe7\031\uffe7\047\uffe7\001\002\000\006\034" +
    "\uffd8\041\045\001\002\000\004\034\113\001\002\000\004" +
    "\031\114\001\002\000\022\004\025\005\030\006\012\007" +
    "\016\011\015\012\021\013\024\016\017\001\002\000\024" +
    "\004\025\005\030\006\012\007\016\011\015\012\021\013" +
    "\024\016\017\031\116\001\002\000\032\004\uffe6\005\uffe6" +
    "\006\uffe6\007\uffe6\011\uffe6\012\uffe6\013\uffe6\014\101\015" +
    "\uffe6\016\uffe6\031\uffe6\047\uffe6\001\002\000\030\004\uffe5" +
    "\005\uffe5\006\uffe5\007\uffe5\011\uffe5\012\uffe5\013\uffe5\015" +
    "\uffe5\016\uffe5\031\uffe5\047\uffe5\001\002\000\004\002\000" +
    "\001\002\000\004\041\122\001\002\000\004\034\123\001" +
    "\002\000\004\031\124\001\002\000\004\046\125\001\002" +
    "\000\004\041\126\001\002\000\004\045\127\001\002\000" +
    "\022\004\025\005\030\006\012\007\016\011\015\012\021" +
    "\013\024\016\017\001\002\000\024\004\025\005\030\006" +
    "\012\007\016\011\015\012\021\013\024\016\017\047\131" +
    "\001\002\000\004\032\132\001\002\000\006\031\135\046" +
    "\134\001\002\000\004\031\144\001\002\000\004\041\136" +
    "\001\002\000\026\004\uffd7\005\uffd7\006\uffd7\007\uffd7\011" +
    "\uffd7\012\uffd7\013\uffd7\016\uffd7\031\uffd7\047\uffd7\001\002" +
    "\000\004\045\137\001\002\000\022\004\025\005\030\006" +
    "\012\007\016\011\015\012\021\013\024\016\017\001\002" +
    "\000\024\004\025\005\030\006\012\007\016\011\015\012" +
    "\021\013\024\016\017\047\141\001\002\000\004\032\142" +
    "\001\002\000\006\031\uffd5\046\134\001\002\000\004\031" +
    "\uffd4\001\002\000\026\004\uffd6\005\uffd6\006\uffd6\007\uffd6" +
    "\011\uffd6\012\uffd6\013\uffd6\016\uffd6\031\uffd6\047\uffd6\001" +
    "\002\000\006\034\uffd8\041\045\001\002\000\004\034\147" +
    "\001\002\000\004\031\150\001\002\000\022\004\025\005" +
    "\030\006\012\007\016\011\015\012\021\013\024\016\017" +
    "\001\002\000\024\004\025\005\030\006\012\007\016\011" +
    "\015\012\021\013\024\016\017\031\152\001\002\000\026" +
    "\004\uffd3\005\uffd3\006\uffd3\007\uffd3\011\uffd3\012\uffd3\013" +
    "\uffd3\016\uffd3\031\uffd3\047\uffd3\001\002\000\006\023\155" +
    "\032\154\001\002\000\026\004\ufff2\005\ufff2\006\ufff2\007" +
    "\ufff2\011\ufff2\012\ufff2\013\ufff2\016\ufff2\031\ufff2\047\ufff2" +
    "\001\002\000\004\010\156\001\002\000\004\032\157\001" +
    "\002\000\026\004\uffee\005\uffee\006\uffee\007\uffee\011\uffee" +
    "\012\uffee\013\uffee\016\uffee\031\uffee\047\uffee\001\002\000" +
    "\004\004\162\001\002\000\004\034\173\001\002\000\004" +
    "\041\163\001\002\000\004\023\164\001\002\000\004\042" +
    "\165\001\002\000\004\032\166\001\002\000\006\032\uffd8" +
    "\041\045\001\002\000\004\032\170\001\002\000\004\041" +
    "\171\001\002\000\004\040\172\001\002\000\004\034\uffe3" +
    "\001\002\000\004\031\174\001\002\000\022\004\025\005" +
    "\030\006\012\007\016\011\015\012\021\013\024\016\017" +
    "\001\002\000\024\004\025\005\030\006\012\007\016\011" +
    "\015\012\021\013\024\016\017\031\176\001\002\000\026" +
    "\004\uffe4\005\uffe4\006\uffe4\007\uffe4\011\uffe4\012\uffe4\013" +
    "\uffe4\016\uffe4\031\uffe4\047\uffe4\001\002\000\006\023\201" +
    "\032\200\001\002\000\026\004\ufff3\005\ufff3\006\ufff3\007" +
    "\ufff3\011\ufff3\012\ufff3\013\ufff3\016\ufff3\031\ufff3\047\ufff3" +
    "\001\002\000\004\037\202\001\002\000\004\032\203\001" +
    "\002\000\026\004\ufff0\005\ufff0\006\ufff0\007\ufff0\011\ufff0" +
    "\012\ufff0\013\ufff0\016\ufff0\031\ufff0\047\ufff0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\201\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\003\021\004\017\006\022\010\013\013" +
    "\025\015\012\016\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\004\074\006\022\010\073\013\077\015\072\016" +
    "\076\001\001\000\006\007\103\017\101\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\054\001\001\000\002" +
    "\001\001\000\004\011\056\001\001\000\002\001\001\000" +
    "\004\011\060\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\064\001\001\000\002\001" +
    "\001\000\004\011\066\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\003\071\004\017\006\022\010\013\013" +
    "\025\015\012\016\026\001\001\000\016\004\074\006\022" +
    "\010\073\013\077\015\072\016\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\104\001\001" +
    "\000\002\001\001\000\020\003\106\004\017\006\022\010" +
    "\013\013\025\015\012\016\026\001\001\000\016\004\074" +
    "\006\022\010\073\013\077\015\072\016\076\001\001\000" +
    "\002\001\001\000\004\011\111\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\003\114\004\017\006\022\010" +
    "\013\013\025\015\012\016\026\001\001\000\016\004\074" +
    "\006\022\010\073\013\077\015\072\016\076\001\001\000" +
    "\004\007\116\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\003\127\004\017\006\022\010\013\013\025\015\012\016" +
    "\026\001\001\000\016\004\074\006\022\010\073\013\077" +
    "\015\072\016\076\001\001\000\002\001\001\000\004\014" +
    "\132\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\003\137\004\017\006" +
    "\022\010\013\013\025\015\012\016\026\001\001\000\016" +
    "\004\074\006\022\010\073\013\077\015\072\016\076\001" +
    "\001\000\002\001\001\000\004\014\142\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\145\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\003\150\004\017" +
    "\006\022\010\013\013\025\015\012\016\026\001\001\000" +
    "\016\004\074\006\022\010\073\013\077\015\072\016\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\160\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\166\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\003\174\004\017\006\022\010\013\013\025\015" +
    "\012\016\026\001\001\000\016\004\074\006\022\010\073" +
    "\013\077\015\072\016\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // WHILE ::= Mientras Apertura BOOL_SENT Cerradura LlaveAC CUERPO LlaveAC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // MASCASE ::= Caso Identificador DoblePunto CUERPO Salida CerrarL MASCASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MASCASE",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // MASCASE ::= Caso Identificador DoblePunto CUERPO Salida CerrarL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MASCASE",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SWITCH ::= Cambio Apertura Identificador Cerradura LlaveAC Caso Identificador DoblePunto CUERPO Salida CerrarL MASCASE LlaveAC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SWITCH ::= Cambio Apertura Identificador Cerradura LlaveAC Caso Identificador DoblePunto CUERPO Salida CerrarL LlaveAC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // BOOL_SENT ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOL_SENT",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // BOOL_SENT ::= Identificador Op_R Comillas Identificador Comillas Op_L BOOL_SENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOL_SENT",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // BOOL_SENT ::= Identificador Op_R Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOL_SENT",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // BOOL_SENT ::= Identificador Op_R Identificador Op_L BOOL_SENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOL_SENT",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // BOOL_SENT ::= Identificador Op_R Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOL_SENT",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // BOOL_SENT ::= Identificador Op_R Decimal Op_L BOOL_SENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOL_SENT",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // BOOL_SENT ::= Identificador Op_R Decimal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOL_SENT",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // BOOL_SENT ::= Identificador Op_R Numero Op_L BOOL_SENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOL_SENT",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // BOOL_SENT ::= Identificador Op_R Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOL_SENT",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // BOOL_SENT ::= Identificador Op_R Op_B Op_L BOOL_SENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOL_SENT",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // BOOL_SENT ::= Identificador Op_R Op_B 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOL_SENT",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FOR_SENT ::= Entero Identificador Igual Numero CerrarL BOOL_SENT CerrarL Identificador Op_I 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR_SENT",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FOR ::= Para Apertura FOR_SENT Cerradura LlaveAC CUERPO LlaveAC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // IF_ELSE ::= Sino Apertura BOOL_SENT Cerradura LlaveAC CUERPO LlaveAC IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // IF_ELSE ::= Sino Apertura BOOL_SENT Cerradura LlaveAC CUERPO LlaveAC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ELSE ::= Ademas LlaveAC CUERPO LlaveAC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // IF ::= Si Apertura BOOL_SENT Cerradura LlaveAC CUERPO LlaveAC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENT_IF ::= IF IF_ELSE ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_IF",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENT_IF ::= IF IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_IF",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENT_IF ::= IF ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_IF",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENT_IF ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_IF",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ASIG ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLA ::= Cadena Identificador Igual Texto CerrarL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLA ::= Entero Identificador Igual Numero CerrarL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLA ::= Boleano Identificador Igual Op_B CerrarL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLA ::= Flotante Identificador Igual Decimal CerrarL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLA ::= Cadena Identificador CerrarL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLA ::= Boleano Identificador CerrarL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECLA ::= Flotante Identificador CerrarL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECLA ::= Entero Identificador CerrarL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CUERPO ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CUERPO ::= CUERPO WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CUERPO ::= SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CUERPO ::= CUERPO SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CUERPO ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CUERPO ::= CUERPO FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CUERPO ::= SENT_IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CUERPO ::= CUERPO SENT_IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CUERPO ::= DECLA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CUERPO ::= CUERPO DECLA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Inicial Apertura Cerradura LlaveAC CUERPO LlaveAC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

